//
// Created by aghoy on 12/3/2023.
//

#ifndef REDBLACK_HH
#define REDBLACK_HH
#include "node.hh"

#include <iostream>
#include <sstream>
#include <string>
#include <fstream>
#include <vector>
#include <stddef.h>
#include <stdlib.h>

using namespace std;

const bool RED = true;
const bool BLACK = false;

template<typename T>
class RBTree{
public:
  //Constructors
  RBTree(){root = NULL;}
  RBTree(T value){this->root = Node<T>(value); size = 1; }
  RBTree(Node<T>* node){this->root = node; size = 1; }

  //Functions
  Node<T> *getRoot(){ return root;}
  Node<T> *getUncle(Node<T> *nibling);
  
  void rotateLeft(Node<T>*);
  void rotateRight(Node<T>*);
  void rotateDirection(bool, Node<T>*);
  
  void fixColor(Node<T> *node);
  void findSize(T);
  
  void insert(const T &value);
  Node<T> *insert(const T &value, Node<T> *node);
  
  //void remove(T value);
  //void remove(T value, Node<T> node);
  void remove(T value);


  // void find(T value);
  void preOrderPrint();
  void postOrderPrint();
  void inOrderPrint();

  int getSize() { return size; }

  bool debug = false;
  

private:
  // Functions that I want to be hidden away
  void preOrderPrint(Node<T> *);
  void postOrderPrint(Node<T> *);
  void inOrderPrint(Node<T> *);

  Node<T> *find(T);
  Node<T> *find(Node<T>*, T);
  Node<T> *root;
  void remove(Node<T> *);

  Node<T>* findMin(Node<T>*);
  void transplant(Node<T>*, Node<T>*);

  void burn_branch(Node<T> *);
  void swap_nodes(Node<T> *, Node<T> *);
  void isolate_branch(Node<T> *);
  void cut_branch(Node<T> *);
  
  void complex_remove(Node<T>*);

  string color_to_string(bool);

  int size = 0;

};

template<typename T>
void RBTree<T>::rotateLeft(Node<T> *node) {
    Node<T> *rightChild = node->getRightChild();
    Node<T> *parent = node->getParent();
    if(rightChild->isNil()) { cout << "right child is nil node in rotate left, exiting"; return; exit(1); }
    
    if(node == root){
      root = rightChild;
    }
    
    if(parent != NULL){
      if(parent->direction_toward(node) == RIGHT)
	parent->setRightChild(rightChild);
      else
	parent->setLeftChild(rightChild);
    }
    else if (parent == NULL)
      {
	rightChild->setParent(NULL);
      }
    //cout << "root:" << root->getValue() << endl;
    Node<T> *temp = rightChild->getLeftChild();
    rightChild->setLeftChild(node);
    //  temp->setParent(node);
    node->setRightChild(temp);
    
}

template<typename T>
void RBTree<T>::rotateRight(Node<T> *node ) {
    //check if left exists
    Node<T> *leftChild = node->getLeftChild();
    Node<T> *parent = node->getParent();
    if(leftChild->isNil()) { cout << "left child is nil node in rotate right, exiting"; return; exit(1); }
    //leftChild parent = node parent
    // node->setParent(leftChild);
    //  leftChild->setParent(parent);
    
    if(node == root){
      root = leftChild;
    }
    
    if(parent != NULL){
      if(parent->direction_toward(node) == RIGHT)
	parent->setRightChild(leftChild);
      else
	parent->setLeftChild(leftChild);
    }
    else if (parent == NULL)
      {
	leftChild->setParent(NULL);
      }
    
    //leftchild rightchild is = to parent left
    Node<T> *temp = leftChild->getRightChild();
    leftChild->setRightChild(node);
    //temp->setParent(node);
    node->setLeftChild(temp);
    
}

template<typename T>
void RBTree<T>::rotateDirection(bool dir, Node<T> *node)
{
  if (dir == RIGHT) { rotateRight(node); }
  else { rotateLeft(node);}
}


template<typename T>
Node<T>* RBTree<T>::getUncle(Node<T>* nibling) {
    Node<T> *nibParent = nibling->getParent();
    if(nibParent == NULL) {
        return NULL;
    }
    Node<T> *grandparent = nibParent->getParent();
    if(nibParent == grandparent->getLeftChild()){
        return grandparent->getRightChild();
    } else {
        return grandparent->getLeftChild();
    }
}

//TODO: finish fixColor, write delete and print
template<typename T>
void RBTree<T>::fixColor(Node<T> *node) {
  // Note: Inserting first node into root case is already covered in insert(T).
  
  Node<T> *current = node; // This will be the node we track.

  while (current->getColor() == RED) //We will continue our loop till current is black.
    {
      Node<T> *parent = current->getParent();
      Node<T> *grandparent = NULL;
      Node<T> *uncle = NULL;
      if(parent != root){
          grandparent = parent->getParent();
          uncle = getUncle(current);
      }
      //cout << "root:" << root->getValue() << endl;

      // If parent's color is black, stop loop, we are done.
      if (parent->getColor() == BLACK)
	{
	  if (debug) { cout << "parent is black node" << endl; }
	  return;
	}

      else if (parent->getColor() == RED && parent == root)
      {
          parent->setColor(BLACK);
	  if (debug) { cout << "parent is red node and root" << endl; }
          return;
      }

      // If the parent's and uncle's color are red, change them to black and grandparent to red. GP might have a red parent, violating no red to red
      else if (parent->getColor() == RED && uncle->getColor() == RED)
	{
	  parent->setColor(BLACK);
	  uncle->setColor(BLACK);
	  grandparent->setColor(RED);
	  current = grandparent; // Do not exit while loop. We must check if GP is fine to be red.
	  if (debug) { cout << "parent and uncle is red" << endl; }
	}
      
      // The grandparent uncle parent line/triangle rotations
      else if (parent->getColor() == RED && uncle->getColor() == BLACK) {

	// Getting direction of grandparent to parent
	bool dir = grandparent->direction_toward(parent);

	// So current node is the inner grandchild. In other words, this is the triangle case.
	if (dir != parent->direction_toward(current))
	  {
	    if (debug) { cout << "triangle case" << endl; }
	    rotateDirection(dir, parent);
	    current = parent;
	    parent = grandparent->get_child_in_direction(dir);
	  }

	// Current node is the outer grandchild. In other words, this is the line case. This is an IF STATEMENT, not if else, because we go from triangle case to line case.
	if (dir == parent->direction_toward(current))
	  {
	    if (debug) { cout << "line case" << endl; }
	    rotateDirection(!dir, grandparent); // Note: Grandparent may be the root at start of rotation.
	    parent->setColor(BLACK);
	    grandparent->setColor(RED);
	    return; // Stop here.
	  }

      }

      // Can't have the loop run again, segfault for uncle/parent/grandparent. Also this covers when GP --> Current and is root (red). Test 3 on Wikipedia
      if (current == root)
	{
	  if (debug) { cout << "current is root so exiting loop" << endl; }
	  return;
	}
    }
}

template<typename T>
void RBTree<T>::insert(const T &value){
    if(root == NULL) {
      root = new Node<T>(value);
      root->setColor(BLACK); // Set Root to black immediately (this is just one case covered.)
      if (debug) { cout << "inserted root: " << value << endl; }
    }
    else {
      Node<T> *fix = insert(value, root);
      if (fix != NULL)
	{
	  fixColor(fix); 
	}
      else
	{
	  size--;
	}
    }
    size++;
  
}

template<typename T>
Node<T>* RBTree<T>::insert(const T &value, Node<T> *node) {
  
  if(value < node->getValue())
    {
      if(node->getLeftChild()->isNil()) {
	delete node->getLeftChild();
	node->setLeftChild(new Node<T>(value));
	if (debug) { cout << "inserted into left of: " << node->getValue() << " value: " << value << endl; }
	return node->getLeftChild();
      }
      else
	{
	  return insert(value, node->getLeftChild());
	}
    }
  
  else if (value == node->getValue())
    {
      node->incrementDegree();
      if (debug) { cout << "incremented degree of: " << value << endl; }
      return NULL;
    }
  
  else
    {
      if(node->getRightChild()->isNil()) {
	delete node->getRightChild();
	node->setRightChild(new Node<T>(value));
	if (debug) { cout << "inserted into right of: " << node->getValue() << " value: " << value << endl; }
	return node->getRightChild();
      }
      else
	{
	  return insert(value, node->getRightChild());
	}
  }
}

template<typename T>
void RBTree<T>::preOrderPrint()
{
  if (root == NULL) { cout << "Root NULL, stopping print" << endl; exit(0); }
  preOrderPrint(root);
}

template<typename T>
void RBTree<T>::preOrderPrint(Node<T> *node)
{
  cout << node->getValue() << " " << color_to_string(node->getColor()) << " " << node->getDegree() << endl;
  if (!node->getLeftChild()->isNil())
    {
      preOrderPrint(node->getLeftChild());
    }
  if (!node->getRightChild()->isNil())
    {
      preOrderPrint(node->getRightChild());
    }
}

template<typename T>
void RBTree<T>::postOrderPrint()
{
    cout << "root:" << root->getValue() << endl;
  if (root == NULL) { cout << "Root NULL, stopping print" << endl; exit(0); }
  postOrderPrint(root);
}

template<typename T>
void RBTree<T>::postOrderPrint(Node<T> *node)
{
  if (!node->getLeftChild()->isNil())
    {
      postOrderPrint(node->getLeftChild());
    }
  if (!node->getRightChild()->isNil())
    {
      postOrderPrint(node->getRightChild());
    }
  cout << node->getValue() << " " << color_to_string(node->getColor()) << " " << node->getDegree() << endl;
}

template<typename T>
void RBTree<T>::inOrderPrint()
{
  if (root == NULL) { cout << "Root NULL, stopping print" << endl; exit(0); }
  inOrderPrint(root);
}

template<typename T>
void RBTree<T>::inOrderPrint(Node<T> *node)
{
   
  if (!node->getLeftChild()->isNil())
    {
      inOrderPrint(node->getLeftChild());
    }
  cout << node->getValue() << " " << color_to_string(node->getColor()) << " " << node->getDegree() << endl;
  if (!node->getRightChild()->isNil())
    {
      inOrderPrint(node->getRightChild());
    }
}



template<typename T>
void RBTree<T>::transplant(Node<T> *removed, Node<T> *successor)
{
  if (removed == root)
    {
      root = successor;
    }
  else if (removed->getParent()->getLeftChild == removed)
    {
      removed->getParent()->setLeftChild(successor); // Set removed's parent's left child to successor
    }
  else
    {
      removed->getParent()->setRightChild(successor); // Set removed's parent's left child to successor
    }
  successor->setParent(removed->getParent()); // Set Successors parent as the removed node's parent
}

template<typename T>
void RBTree<T>::remove(T key)
{
  Node<T> *del = find(key);
  if (del == NULL) { return; }

  Node<T> *leftChild = del->getLeftChild();
  Node<T> *rightChild = del->getRightChild();
  
  // If removed node is root with no children, delete it. Update root
  if (del == root && size == 1) 
    {
      if (debug) { cout << "removing root" << endl; }
      cut_branch(del);
      root = NULL;
      return;
    }
  // If removed node has no children and red, delete it. Put Nil Node back
  if (del->has_no_children() && del->getColor() == RED)
    {
      if (debug) { cout << "removing sole node that's red" << endl; }
      burn_branch(del);
      return;
    }
  // If removed node has no children and is black, we have to do more to conserve red-black tree properties.
  if (del->has_no_children() && del->getColor() == BLACK)
    {
      if (debug) { cout << "going to complex removal" << endl; }
      del->become_nil();
      size--;
      complex_remove(del);
      return;
    }
  // If removed node has 2 children
  if (!(leftChild->isNil() || rightChild->isNil()))
    {
      if (debug) { cout << "removing based on 2 children" << endl; }
      Node<T> *successor = findMin(del->getRightChild());
      swap_nodes(successor, del);
      remove(successor); 
      return;
    }
  // Single child case. Must be a black with a red child. So swap nodes and then delete
  else if (!leftChild->isNil())
    {
      swap_nodes(del, leftChild);
      burn_branch(leftChild);
      return;
    }
  else if (!rightChild->isNil())
    {
      swap_nodes(del, rightChild);
      burn_branch(rightChild);
      return;
    }  
}

template<typename T>
void RBTree<T>::remove(Node<T> *del)
{
  Node<T> *leftChild = del->getLeftChild();
  Node<T> *rightChild = del->getRightChild();
  if (del->has_no_children()) { burn_branch(del); }
    // Single child case. Must be a black with a red child. So swap nodes and then delete
  else if (!leftChild->isNil())
    {
      swap_nodes(del, leftChild);
      burn_branch(leftChild);
      return;
    }
  else if (!rightChild->isNil())
    {
      swap_nodes(del, rightChild);
      burn_branch(rightChild);
      return;
    }  
  
}


/**
 * Utility function to combine two steps.
 */
template<typename T>
void RBTree<T>::burn_branch(Node<T> *burning_point)
{
  isolate_branch(burning_point);
  cut_branch(burning_point);
}

/**
 * Swaps the location of two nodes within the tree
 */
template<typename T>
void RBTree<T>::swap_nodes(Node<T> *n, Node<T> *m)
{
  T temp = n->getValue();
  int temp_degree = n->getDegree();
  
  n->setValue(m->getValue());
  n->setDegree(m->getDegree());
  
  m->setValue(temp);
  m->setDegree(temp_degree);
}

/**
 * Snaps connection between parent node and child node
 */
template<typename T>
void RBTree<T>::isolate_branch(Node<T> *cut)
{
  Node<T> *stem = cut->getParent();
  if (stem->getRightChild() == cut) { stem->setRightChild(new Node<T>(stem)); }
  else if (stem->getLeftChild() == cut) { stem->setLeftChild(new Node<T>(stem)); }
}


/**
 * Deletes an entire subtree/subtree including the root of the subtree/tree.
 * DOES subtract size
 */
template<typename T>
void RBTree<T>::cut_branch(Node<T> *node)
{
  if (node->getLeftChild() != NULL) { cut_branch(node->getLeftChild()); }
  if (node->getRightChild() != NULL) { cut_branch(node->getRightChild()); }
  if (!node->isNil()) { size--; } // If its an actual node, subtract from size.
  delete node;
}

/**
 * Handles removing a black node with no children. There will be 1 less black node in a path, so we have to account for that and reorganize the colors of the tree
 */
template<typename T>
void RBTree<T>::complex_remove(Node<T> *node)
{
  Node<T> *current = node;
  // If the current is root, none of the the below nodes will work (they will be NULL, which should be impossible.)
  while (current != root) 
    {
     
      Node<T> *parent = current->getParent();
      bool dir = parent->direction_toward(current);
      Node<T> *sibling = parent->get_child_in_direction(!dir);
      Node<T> *close_nephew = sibling->get_child_in_direction(dir);
      Node<T> *distant_nephew = sibling->get_child_in_direction(!dir);

      // If sibling and sibling children are colored black
      if (parent->getColor() == BLACK && sibling->getColor() == BLACK && close_nephew->getColor() == BLACK && distant_nephew->getColor() == BLACK)
	{
	  if (debug) { cout << "sibling & sibling children are colored black" << endl; }
	  sibling->setColor(RED);
	  current = parent;
	}
  
      //
      else if (sibling->getColor() == RED)
	{
	  if (debug) { cout << "sibling is red" << endl; }
	  rotateDirection(dir, parent);
	  parent->setColor(RED);
	  sibling->setColor(BLACK);
	  sibling = close_nephew;
	  distant_nephew = sibling->get_child_in_direction(!dir);
	}

      // If the parent is red while the sibling and its children are black, then we'll set sibling and parent to the opposite color. 
      else if (parent->getColor() == RED && sibling->getColor() == BLACK && close_nephew->getColor() == BLACK && distant_nephew->getColor() == BLACK)
	{
	  if (debug) { cout << "parent colored red while sibling + children colored black" << endl; }
	  sibling->setColor(RED);
	  parent->setColor(BLACK);
	  return; // We add a black node to the path, thus making up for any loss. So return.
	}

      // If the sibling and distant nephew are black while close nephew is red, we'll be making a rotation
      else if (sibling->getColor() == BLACK && close_nephew->getColor() == RED && distant_nephew->getColor() == BLACK)
	{
	  if (debug) { cout << "sibling and distant colored black while close colored red" << endl; }
	  rotateDirection(!dir, sibling);
	  // Sibling should not be the root even in rotation.
	  if (sibling == root) { cout << "Sibling rotated to root in complex removal. Exiting" << endl; exit(1); }
	  
	  sibling->setColor(RED);
	  close_nephew->setColor(BLACK);
       
	  // I think below is unneccary, as it will be updated regardless in next loop.
	  distant_nephew = sibling; 
	  sibling = close_nephew;
	}
      // If the distant nephew is red and sibling is black. We will rotate and the result will look like trio of black nodes or red parent with two black nodes as children
      if (distant_nephew->getColor() == RED && sibling->getColor() == BLACK)
	{
	  if (debug) { cout << "distant nephew is colored red and sibling is colored black" << endl; }
	  rotateDirection(dir, parent);
	  sibling->setColor(parent->getColor());
	  parent->setColor(BLACK);
	  distant_nephew->setColor(BLACK); // This node will be pulled up, so we are changing its color
	  return;	  
	}
    }

  
}


template<typename T>
Node<T>* RBTree<T>::findMin(Node<T> *node)
{
  if (node->getLeftChild()->isNil()) { return node; }
  return findMin(node->getLeftChild());
}

/**
 * Will attempt to find a node given a key.
 * If it does not find a node, it will print that out BUT continue the program passing NULL as return.
 */
template<typename T>
Node<T>* RBTree<T>::find(T key)
{
  if (root == NULL) { cout << "Root is null, canceling find and program." << endl; exit(0); }

  Node<T>* lock = find(root, key);
  if (lock == NULL) { cout << "Could not find Node: " << key << endl; return lock; } // Will continue program.
  return lock;
}

/**
 * This is the recursive function that will find a node based on a key
 */
template<typename T>
Node<T>* RBTree<T>::find(Node<T> *node, T key)
{
  if (node->isNil()) { return NULL; } // Key not found
  
  T lock = node->getValue();
  if (lock == key) { return node; } // Found node, return.
  else if (key > lock) { return find(node->getRightChild(), key); } // Use BST property, check right.
  else { return find(node->getLeftChild(), key); } // Must be smaller if not two other cases, 
}

template<typename T>
string RBTree<T>::color_to_string(bool color)
{
  if (color == RED) { return "RED"; }
  return "BLACK";
}

template<typename T>
void RBTree<T>::findSize(T key)
{
  Node<T> *node = find(key);
  if (node == NULL) { cout << "Node nonexistent, exiting" << endl; exit(1); }

  
  cout << "The amount of times this word appears is: " << node->getDegree() << endl;
}

#endif //REDBLACK_HH
